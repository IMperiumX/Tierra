# Generated by Django 4.1.7 on 2023-03-12 14:19

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import librephotos.mixins.clusters
import librephotos.mixins.faces
import librephotos.mixins.persons
import librephotos.mixins.photos
import tierra.users.model_mixins


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Cluster",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("mean_face_encoding", models.TextField()),
                ("cluster_id", models.IntegerField(null=True)),
                ("name", models.TextField(null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=models.SET(
                            tierra.users.model_mixins.UserMixin.get_deleted_user
                        ),
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            bases=(librephotos.mixins.clusters.ClusterMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Photo",
            fields=[
                ("image_paths", models.JSONField(default=list)),
                (
                    "image_hash",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("thumbnail_big", models.ImageField(upload_to="thumbnails_big")),
                ("square_thumbnail", models.ImageField(upload_to="square_thumbnails")),
                (
                    "square_thumbnail_small",
                    models.ImageField(upload_to="square_thumbnails_small"),
                ),
                ("aspect_ratio", models.FloatField(blank=True, null=True)),
                ("added_on", models.DateTimeField(db_index=True)),
                ("exif_gps_lat", models.FloatField(blank=True, null=True)),
                ("exif_gps_lon", models.FloatField(blank=True, null=True)),
                (
                    "exif_timestamp",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("exif_json", models.JSONField(blank=True, null=True)),
                (
                    "geolocation_json",
                    models.JSONField(blank=True, db_index=True, null=True),
                ),
                (
                    "captions_json",
                    models.JSONField(blank=True, db_index=True, null=True),
                ),
                ("dominant_color", models.TextField(blank=True, null=True)),
                (
                    "search_captions",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                (
                    "search_location",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                (
                    "timestamp",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("rating", models.IntegerField(db_index=True, default=0)),
                ("deleted", models.BooleanField(db_index=True, default=False)),
                ("hidden", models.BooleanField(db_index=True, default=False)),
                ("video", models.BooleanField(default=False)),
                ("video_length", models.TextField(blank=True, null=True)),
                ("size", models.IntegerField(default=0)),
                ("fstop", models.FloatField(blank=True, null=True)),
                ("focal_length", models.FloatField(blank=True, null=True)),
                ("iso", models.IntegerField(blank=True, null=True)),
                ("shutter_speed", models.TextField(blank=True, null=True)),
                ("camera", models.TextField(blank=True, null=True)),
                ("lens", models.TextField(blank=True, null=True)),
                ("width", models.IntegerField(default=0)),
                ("height", models.IntegerField(default=0)),
                ("focalLength35Equivalent", models.IntegerField(blank=True, null=True)),
                ("subjectDistance", models.FloatField(blank=True, null=True)),
                ("digitalZoomRatio", models.FloatField(blank=True, null=True)),
                ("public", models.BooleanField(db_index=True, default=False)),
                (
                    "clip_embeddings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(blank=True, null=True),
                        null=True,
                        size=512,
                    ),
                ),
                ("clip_embeddings_magnitude", models.FloatField(blank=True, null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        default=None,
                        on_delete=models.SET(
                            tierra.users.model_mixins.UserMixin.get_deleted_user
                        ),
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shared_to",
                    models.ManyToManyField(
                        related_name="photo_shared_to", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            bases=(librephotos.mixins.photos.PhotoMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Person",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=128)),
                (
                    "kind",
                    models.CharField(
                        choices=[
                            ("USER", "User Labelled"),
                            ("CLUSTER", "Cluster ID"),
                            ("UNKNOWN", "Unknown Person"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "cluster_owner",
                    models.ForeignKey(
                        default=None,
                        null=True,
                        on_delete=models.SET(
                            tierra.users.model_mixins.UserMixin.get_deleted_user
                        ),
                        related_name="owner",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "cover_photo",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="person",
                        to="librephotos.photo",
                    ),
                ),
            ],
            bases=(librephotos.mixins.persons.PersonMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Face",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.ImageField(null=True, upload_to="faces")),
                (
                    "image_path",
                    models.FilePathField(
                        match="foo.*",
                        path="/home/yusufadell/Pictures/Wallpapers",
                        recursive=True,
                    ),
                ),
                ("person_label_is_inferred", models.BooleanField(null=True)),
                ("person_label_probability", models.FloatField(default=0.0)),
                ("location_top", models.IntegerField()),
                ("location_bottom", models.IntegerField()),
                ("location_left", models.IntegerField()),
                ("location_right", models.IntegerField()),
                ("encoding", models.TextField()),
                (
                    "cluster",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=models.SET(
                            librephotos.mixins.clusters.ClusterMixin.get_unknown_cluster
                        ),
                        related_name="faces",
                        to="librephotos.cluster",
                    ),
                ),
                (
                    "person",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="faces",
                        to="librephotos.person",
                    ),
                ),
                (
                    "photo",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="faces",
                        to="librephotos.photo",
                    ),
                ),
            ],
            bases=(librephotos.mixins.faces.FaceMixin, models.Model),
        ),
        migrations.AddField(
            model_name="cluster",
            name="person",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.SET(
                    librephotos.mixins.persons.PersonMixin.get_unknown_person
                ),
                related_name="clusters",
                to="librephotos.person",
            ),
        ),
        migrations.AddIndex(
            model_name="face",
            index=models.Index(
                fields=["person_label_is_inferred", "person_label_probability"],
                name="librephotos_person__ff1855_idx",
            ),
        ),
    ]
