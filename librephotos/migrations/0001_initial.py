# Generated by Django 4.1.5 on 2023-02-05 00:46

from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Photo",
            fields=[
                ("image_paths", models.JSONField(default=list)),
                (
                    "image_hash",
                    models.CharField(max_length=64, primary_key=True, serialize=False),
                ),
                ("thumbnail_big", models.ImageField(upload_to="thumbnails_big")),
                ("square_thumbnail", models.ImageField(upload_to="square_thumbnails")),
                (
                    "square_thumbnail_small",
                    models.ImageField(upload_to="square_thumbnails_small"),
                ),
                ("aspect_ratio", models.FloatField(blank=True, null=True)),
                ("added_on", models.DateTimeField(db_index=True)),
                ("exif_gps_lat", models.FloatField(blank=True, null=True)),
                ("exif_gps_lon", models.FloatField(blank=True, null=True)),
                (
                    "exif_timestamp",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("exif_json", models.JSONField(blank=True, null=True)),
                (
                    "geolocation_json",
                    models.JSONField(blank=True, db_index=True, null=True),
                ),
                (
                    "captions_json",
                    models.JSONField(blank=True, db_index=True, null=True),
                ),
                ("dominant_color", models.TextField(blank=True, null=True)),
                (
                    "search_captions",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                (
                    "search_location",
                    models.TextField(blank=True, db_index=True, null=True),
                ),
                (
                    "timestamp",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                ("rating", models.IntegerField(db_index=True, default=0)),
                ("deleted", models.BooleanField(db_index=True, default=False)),
                ("hidden", models.BooleanField(db_index=True, default=False)),
                ("video", models.BooleanField(default=False)),
                ("video_length", models.TextField(blank=True, null=True)),
                ("size", models.IntegerField(default=0)),
                ("fstop", models.FloatField(blank=True, null=True)),
                ("focal_length", models.FloatField(blank=True, null=True)),
                ("iso", models.IntegerField(blank=True, null=True)),
                ("shutter_speed", models.TextField(blank=True, null=True)),
                ("camera", models.TextField(blank=True, null=True)),
                ("lens", models.TextField(blank=True, null=True)),
                ("width", models.IntegerField(default=0)),
                ("height", models.IntegerField(default=0)),
                ("focalLength35Equivalent", models.IntegerField(blank=True, null=True)),
                ("subjectDistance", models.FloatField(blank=True, null=True)),
                ("digitalZoomRatio", models.FloatField(blank=True, null=True)),
                ("public", models.BooleanField(db_index=True, default=False)),
                (
                    "clip_embeddings",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(blank=True, null=True),
                        null=True,
                        size=512,
                    ),
                ),
                ("clip_embeddings_magnitude", models.FloatField(blank=True, null=True)),
                (
                    "owner",
                    models.ForeignKey(
                        default=None,
                        on_delete=models.SET(users.models.UserMixin.get_deleted_user),
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "shared_to",
                    models.ManyToManyField(
                        related_name="photo_shared_to", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
        ),
    ]
